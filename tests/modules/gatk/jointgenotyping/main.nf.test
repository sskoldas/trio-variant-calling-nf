nextflow_process {

    name "Test Process GATK_JOINTGENOTYPING"
    script "modules/gatk/jointgenotyping/main.nf"
    process "GATK_JOINTGENOTYPING"

    test("Should call trio's joint genotype correctly") {

        when {
            params {
                outdir = "tests/results"
            }
            process {
                """
                input[0] = [
                    file("${projectDir}/tests/modules/gatk/jointgenotyping/inputs/reads_father.bam.g.vcf"),
                    file("${projectDir}/tests/modules/gatk/jointgenotyping/inputs/reads_mother.bam.g.vcf"),
                    file("${projectDir}/tests/modules/gatk/jointgenotyping/inputs/reads_son.bam.g.vcf")
                ]
                input[1] = [
                    file("${projectDir}/tests/modules/gatk/jointgenotyping/inputs/reads_father.bam.g.vcf.idx"),
                    file("${projectDir}/tests/modules/gatk/jointgenotyping/inputs/reads_mother.bam.g.vcf.idx"),
                    file("${projectDir}/tests/modules/gatk/jointgenotyping/inputs/reads_son.bam.g.vcf.idx")
                ]
                input[2] = file("${projectDir}/data/ref/intervals.bed")
                input[3] = "family_trio"
                input[4] = file("${projectDir}/data/ref/ref.fasta")
                input[5] = file("${projectDir}/data/ref/ref.fasta.fai")
                input[6] = file("${projectDir}/data/ref/ref.dict")
                """
            }
        }

        then {
            assert process.success
            assert path(process.out[0][0]).readLines().contains('#CHROM	POS	ID	REF	ALT	QUAL	FILTER	INFO	FORMAT	reads_father	reads_mother	reads_son')
        }

    }

}
